{
  "_from": "rotating-file-stream",
  "_id": "rotating-file-stream@1.3.8",
  "_inBundle": false,
  "_integrity": "sha512-zjs8REPs7swi/qTEfuZlas9WL4UPsjCiL4u1Xk7CKEKGwdblV9rwb7nsMYpcR9Acj5jbssj+INFgyBLm/vzdGA==",
  "_location": "/rotating-file-stream",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "rotating-file-stream",
    "fetchSpec": "latest",
    "name": "rotating-file-stream",
    "raw": "rotating-file-stream",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rotating-file-stream/-/rotating-file-stream-1.3.8.tgz",
  "_shasum": "291d27354bb7f22bf25ca0ebdf2a4e06711c43b2",
  "_spec": "rotating-file-stream",
  "_where": "/home/andreafg/Documentos/gbet-core",
  "author": {
    "email": "daniele.icc@gmail.com",
    "name": "Daniele Ricci",
    "url": "https://github.com/iccicci"
  },
  "bugs": {
    "url": "https://github.com/iccicci/rotating-file-stream/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "cicci"
    },
    {
      "name": "allevo"
    },
    {
      "name": "Jorge Silva",
      "email": "jorgemsrs@gmail.com"
    },
    {
      "name": "Jan Christoph Bernack",
      "email": "jc.bernack@gmail.com"
    },
    {
      "name": "rakshith-ravi"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Opens a stream.Writable to a file rotated by interval and/or size. A logrotate alternative.",
  "devDependencies": {
    "eslint": "5.6.0",
    "istanbul": "0.4.5",
    "mocha": "5.2.0",
    "mocha-istanbul": "0.3.0"
  },
  "engines": {
    "node": ">=0.11"
  },
  "homepage": "https://github.com/iccicci/rotating-file-stream#readme",
  "keywords": [
    "log",
    "logrotate",
    "rotate"
  ],
  "license": "MIT",
  "name": "rotating-file-stream",
  "optionalDependencies": {},
  "readme": "# rotating-file-stream\n\n[![Build Status](https://travis-ci.org/iccicci/rotating-file-stream.png?branch=master)](https://travis-ci.org/iccicci/rotating-file-stream?branch=master)\n[![Code Climate](https://codeclimate.com/github/iccicci/rotating-file-stream/badges/gpa.svg)](https://codeclimate.com/github/iccicci/rotating-file-stream)\n[![Test Coverage](https://codeclimate.com/github/iccicci/rotating-file-stream/badges/coverage.svg)](https://codeclimate.com/github/iccicci/rotating-file-stream/coverage)\n[![Donate](http://img.shields.io/donate/bitcoin.png?color=blue)](https://blockchain.info/address/12p1p5q7sK75tPyuesZmssiMYr4TKzpSCN)\n\n[![NPM version](https://badge.fury.io/js/rotating-file-stream.svg)](https://www.npmjs.com/package/rotating-file-stream)\n[![Dependencies](https://david-dm.org/iccicci/rotating-file-stream.svg)](https://david-dm.org/iccicci/rotating-file-stream)\n[![Dev Dependencies](https://david-dm.org/iccicci/rotating-file-stream/dev-status.svg)](https://david-dm.org/iccicci/rotating-file-stream?type=dev)\n\n[![NPM](https://nodei.co/npm/rotating-file-stream.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/rotating-file-stream/)\n\n### Description\n\nCreates a [stream.Writable](https://nodejs.org/api/stream.html#stream_class_stream_writable) to a file which is rotated.\nRotation behaviour can be deeply customized; optionally, classical UNIX __logrotate__ behaviour can be used.\n\n### Usage\n\n```javascript\nvar rfs    = require('rotating-file-stream');\nvar stream = rfs('file.log', {\n    size:     '10M', // rotate every 10 MegaBytes written\n    interval: '1d',  // rotate daily\n    compress: 'gzip' // compress rotated files\n});\n```\n\n### Installation\n\nWith [npm](https://www.npmjs.com/package/rotating-file-stream):\n```sh\n$ npm install --save rotating-file-stream\n```\n\n# API\n\n```javascript\nrequire('rotating-file-stream');\n```\nReturns __RotatingFileStream__ constructor.\n\n## Class: RotatingFileStream\nExtends [stream.Writable](https://nodejs.org/api/stream.html#stream_class_stream_writable).\n\n## [new] RotatingFileStream(filename, options)\n\nReturns a new __RotatingFileStream__ to _filename_ as\n[fs.createWriteStream](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options) does.\nThe file is rotated following _options_ rules.\n\n### filename {String|Function}\n\nThe most complex problem about file name is: \"how to call the rotated file name?\"\n\nThe answer to this question may vary in many forms depending on application requirements and/or specifications.\nIf there are no requirements, a _String_ can be used and _default rotated file name generator_ will be used;\notherwise a _Function_ which returns the _rotated file name_ can be used.\n\n#### function filename(time, index)\n\n* time: {Date} If both rotation by interval is enabled and __options.rotationTime__ [(see below)](#rotationtime) is\n__false__, the start time of rotation period, otherwise the time when rotation job started. If __null__, the\n_not-rotated file name_ must be returned.\n* index {Number} The progressive index of rotation by size in the same rotation period.\n\nAn example of a complex _rotated file name generator_ function could be:\n\n```javascript\nfunction pad(num) {\n    return (num > 9 ? \"\" : \"0\") + num;\n}\n\nfunction generator(time, index) {\n    if(! time)\n        return \"file.log\";\n\n    var month  = time.getFullYear() + \"\" + pad(time.getMonth() + 1);\n    var day    = pad(time.getDate());\n    var hour   = pad(time.getHours());\n    var minute = pad(time.getMinutes());\n\n    return month + \"/\" + month +\n        day + \"-\" + hour + minute + \"-\" + index + \"-file.log\";\n}\n\nvar rfs    = require('rotating-file-stream');\nvar stream = rfs(generator, {\n    size:     '10M',\n    interval: '30m'\n});\n```\n\n__Note:__\nif both rotation by interval and rotation by time are used, returned _rotated file name_ __must__ be function of both\nparameters _time_ and _index_. Alternatively, __rotationTime__ _option_ can be used (to see below).\n\nIf classical __logrotate__ behaviour is enabled _rotated file name_ is only a function of _index_.\n\n#### function filename(index)\n\n* index {Number} The progressive index of rotation. If __null__, the _not-rotated file name_ must be returned.\n\n__Note:__\nThe _not-rotated file name_ __must__ be only the _filename_, to specify a _path_ the appropriate option __must__ be used.\n```javascript\nrfs('path/to/file.log'); // wrong\nrfs('file.log', { path: 'path/to' }); // OK\n```\n\n__Note:__\nif part of returned destination path does not exists, the rotation job will try to create it.\n\n### options {Object}\n\n* compress: {String|Function|True} (default: null) Specifies compression method of rotated files.\n* highWaterMark: {Number} (default: null) Proxied to [new stream.Writable](https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options)\n* history: {String} (default: null) Specifies the _history filename_.\n* immutable: {Boolean} (default: null) Never mutates file names.\n* initialRotation: {Boolean} (default: null) Initial rotation based on _not-rotated file_ timestamp.\n* interval: {String} (default: null) Specifies the time interval to rotate the file.\n* maxFiles: {Integer} (default: null) Specifies the maximum number of rotated files to keep.\n* maxSize: {String} (default: null) Specifies the maximum size of rotated files to keep.\n* mode: {Integer} (default: null) Proxied to [fs.createWriteStream](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options)\n* path: {String} (default: null) Specifies the base path for files.\n* rotate: {Integer} (default: null) Enables the classical UNIX __logrotate__ behaviour.\n* rotationTime: {Boolean} (default: null) Makes rotated file name with time of rotation.\n* size: {String} (default: null) Specifies the file size to rotate the file.\n\n#### path\n\nIf present, it is prepended to generated file names as well as for history file.\n\n#### size\n\nAccepts a positive integer followed by one of these possible letters:\n\n* __B__: Bites\n* __K__: KiloBites\n* __M__: MegaBytes\n* __G__: GigaBytes\n\n```javascript\n  size: '300B', // rotates the file when size exceeds 300 Bytes\n                // useful for tests\n```\n\n```javascript\n  size: '300K', // rotates the file when size exceeds 300 KiloBytes\n```\n\n```javascript\n  size: '100M', // rotates the file when size exceeds 100 MegaBytes\n```\n\n```javascript\n  size: '1G', // rotates the file when size exceeds a GigaByte\n```\n\n#### interval\n\nAccepts a positive integer followed by one of these possible letters:\n\n* __s__: seconds. Accepts integer divider of 60.\n* __m__: minutes. Accepts integer divider of 60.\n* __h__: hours. Accepts integer divider of 24.\n* __d__: days\n\n```javascript\n  interval: '5s', // rotates at seconds 0, 5, 10, 15 and so on\n                  // useful for tests\n```\n\n```javascript\n  interval: '5m', // rotates at minutes 0, 5, 10, 15 and so on\n```\n\n```javascript\n  interval: '2h', // rotates at midnight, 02:00, 04:00 and so on\n```\n\n```javascript\n  interval: '1d', // rotates at every midnight\n```\n\n#### compress\n\nDue the nature of __Node.js__ compression may be done with an external command (to use other CPUs than the one used\nby __Node.js__) or with internal code (to use the CPU used by __Node.js__). This decision is left to you.\n\nFollowing fixed strings are allowed to compress the files with internal libraries:\n* bzip2 (__not implemented yet__)\n* gzip\n\nTo enable external compression, a _function_ can be used or simply the _boolean_ __true__ value to use default\nexternal compression.\nThe function should accept _source_ and _dest_ file names and must return the shell command to be executed to\ncompress the file.\nThe two following code snippets have exactly the same effect:\n\n```javascript\nvar rfs    = require('rotating-file-stream');\nvar stream = rfs('file.log', {\n    size:     '10M',\n    compress: true\n});\n```\n\n```javascript\nvar rfs    = require('rotating-file-stream');\nvar stream = rfs('file.log', {\n    size:     '10M',\n    compress: function(source, dest) {\n        return \"cat \" + source + \" | gzip -c9 > \" + dest;\n    }\n});\n```\n\n__Note:__\nthis option is ignored if __immutable__ is set to __true__.\n\n__Note:__\nthe shell command to compress the rotated file should not remove the source file, it will be removed by the package\nif rotation job complete with success.\n\n#### initialRotation\nWhen program stops in a rotation period then restarts in a new rotation period, logs of differente rotation period will\ngo in the next rotated file; in a few words: a rotation job is lost. If this option is set to __true__ an initial check\nis performed against the _not-rotated file_ timestamp and, if it falls in a previous rotation period, an initial\nrotation job is done as well.\n\n__Note:__\nthis option is ignored if __rotationTime__ is set to __true__.\n\n#### rotate\n\nIf specified, classical UNIX __logrotate__ behaviour is enabled and the value of this option has same effect in\n_logrotate.conf_ file.\n\n__Note:__\nfollowing options are ignored if __rotate__ option is specified.\n\n#### immutable\n\nIf set to __true__, names of generated files never changes. In other words the _rotated file name generator_ is never\ncalled with a __null__ _time_ parameter and new files are immediately generated with their rotated name.\n__rotation__ _envet_ now has a _filename_ paramere with the newly created file name.\nUsefull to send logs to logstash through filebeat.\n\n__Note:__\nif this option is set to __true__, __compress__ is ignored.\n\n__Note:__\nthis option is ignored if __interval__ is not set.\n\n#### rotationTime\n\nAs specified above, if rotation by interval is enabled, the parameter _time_ passed to _rotatle name generator_ is the\nstart time of rotation period. Setting this option to __true__, parameter _time_ passed is time when rotation job\nstarted.\n\n__Note:__\nif this option is set to __true__, __initialRotation__ is ignored.\n\n#### history\n\nDue to the complexity that _rotated file names_ can have because of the _filename generator function_, if number or\nsize of rotated files should not exceed a given limit, the package needs a file where to store this information. This\noption specifies the name of that file. This option takes effects only if at least one of __maxFiles__ or __maxSize__\nis used. If __null__, the _not rotated filename_ with the '.txt' suffix is used.\n\n#### maxFiles\n\nIf specified, it's value is the maximum number of _rotated files_ to be kept.\n\n#### maxSize\n\nIf specified, it's value must respect same syntax of [size](#size) option and is the maximum size of _rotated files_\nto be kept.\n\n## Events\n\nCustom _Events_ are emitted by the stream.\n\n```javascript\nvar rfs    = require('rotating-file-stream');\nvar stream = rfs(...);\n\nstream.on('error', function(err) {\n    // here are reported blocking errors\n    // once this event is emitted, the stream will be closed as well\n});\n\nstream.on('open', function(filename) {\n    // no rotated file is open (emitted after each rotation as well)\n    // filename: useful if immutable option is true\n});\n\nstream.on('removed', function(filename, number) {\n    // rotation job removed the specified old rotated file\n    // number == true, the file was removed to not exceed maxFiles\n    // number == false, the file was removed to not exceed maxSize\n});\n\nstream.on('rotation', function() {\n    // rotation job started\n});\n\nstream.on('rotated', function(filename) {\n    // rotation job completed with success producing given filename\n});\n\nstream.on('warning', function(err) {\n    // here are reported non blocking errors\n});\n```\n\n## Rotation logic\n\nRegardless of when and why rotation happens, the content of a single\n[stream.write](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback)\nwill never be split among two files.\n\n### by size\n\nOnce the _not-rotated_ file is opened first time, its size is checked and if it is greater or equal to\nsize limit, a first rotation happens. After each\n[stream.write](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback),\nthe same check is performed.\n\n### by interval\n\nThe package sets a [Timeout](https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args)\nto start a rotation job at the right moment.\n\n## Under the hood\n\nLogs should be handled so carefully, so this package tries to never overwrite files.\n\nAt stream creation, if the _not-rotated_ log file already exists and its size exceeds the rotation size,\nan initial rotation attempt is done.\n\nAt each rotation attempt a check is done to verify that destination rotated file does not exists yet;\nif this is not the case a new destination _rotated file name_ is generated and the same check is\nperformed before going on. This is repeated until a not existing destination file name is found or the\npackage is exhausted. For this reason the _rotated file name generator_ function may be called several\ntimes for each rotation job.\n\nIf requested by __maxFiles__ or __maxSize__ options, at the end of a rotation job, a check is performed to ensure that\ngiven limits are respected. This means that __while rotation job is running both the limits could be not respected__,\nthe same can happend (if __maxFiles__ or __maxSize__ are changed) till the end of first _rotation job_.\nThe first check performed is the one against __maxFiles__, in case some files are removed, than the check against\n__maxSize__ is performed, finally other files can be removed. When __maxFiles__ or __maxSize__ are enabled for first\ntime, an _history file_ can be created with one _rotated filename_ (as returned by _filename generator function_) at\neach line.\n\nOnce an __error__ _event_ is emitted, nothing more can be done: the stream is closed as well.\n\n## Compatibility\n\nThis package is written following  __Node.js 4.0__ specifications always taking care about backward\ncompatibility. The package is tested under\n[several Node.js versions](https://travis-ci.org/iccicci/rotating-file-stream).\n\n__Required: Node.js 0.11__\n\n## Licence\n\n[MIT Licence](https://github.com/iccicci/rotating-file-stream/blob/master/LICENSE)\n\n## Bugs\n\nDo not hesitate to report any bug or inconsistency [@github](https://github.com/iccicci/rotating-file-stream/issues).\n\n## ChangeLog\n\n[ChangeLog](https://github.com/iccicci/rotating-file-stream/blob/master/CHANGELOG.md)\n\n## Donating\n\nIf you find useful this package, please consider the opportunity to donate some satoshis to this bitcoin address:\n__12p1p5q7sK75tPyuesZmssiMYr4TKzpSCN__\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/iccicci/rotating-file-stream.git"
  },
  "scripts": {
    "all": "npm run npmignore && npm run eslint && npm run coverage",
    "coverage": "TZ=\"Europe/Rome\" ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive test",
    "eslint": "eslint *.js test/*js",
    "npmignore": "echo '.codeclimate.yml\\n.eslintrc\\n.gitignore\\n.travis.yml\\nCHANGELOG.md\\npackage-lock.json\\ntest' > .npmignore ; cat .gitignore >> .npmignore",
    "test": "bash -c 'if [[ `node --version` =~ ^v0.1 ]] ; then npm install mocha@3.5.3 ; fi' ; TZ=\"Europe/Rome\" ./node_modules/.bin/_mocha test"
  },
  "version": "1.3.8"
}
