'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

let generateDbName = (() => {
  var _ref = _asyncToGenerator(function* (dbName) {
    return dbName || (0, _v2.default)();
  });

  return function generateDbName(_x) {
    return _ref.apply(this, arguments);
  };
})();

let generateConnectionString = (() => {
  var _ref2 = _asyncToGenerator(function* (port, dbName) {
    return `mongodb://127.0.0.1:${port}/${dbName}`;
  });

  return function generateConnectionString(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
})();

var _v = require('uuid/v4');

var _v2 = _interopRequireDefault(_v);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _getPort = require('get-port');

var _getPort2 = _interopRequireDefault(_getPort);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _MongoInstance = require('./util/MongoInstance');

var _MongoInstance2 = _interopRequireDefault(_MongoInstance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

_tmp2.default.setGracefulCleanup();

class MongoMemoryServer {

  constructor(opts = {}) {
    this.isRunning = false;

    this.opts = opts;
    if (!this.opts.instance) this.opts.instance = {};
    if (!this.opts.binary) this.opts.binary = {};

    this.debug = msg => {
      if (this.opts.debug) {
        console.log(msg);
      }
    };

    // autoStart by default
    if (!opts.hasOwnProperty('autoStart') || opts.autoStart) {
      this.debug('Autostarting MongoDB instance...');
      this.start();
    }
  }

  start() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this.runningInstance) {
        throw new Error('MongoDB instance already in status startup/running/error. Use opts.debug = true for more info.');
      }

      _this.runningInstance = _this._startUpInstance().catch(function (err) {
        if (err.message === 'Mongod shutting down' || err === 'Mongod shutting down') {
          _this.debug(`Mongodb does not started. Trying to start on another port one more time...`);
          _this.opts.instance.port = null;
          return _this._startUpInstance();
        }
        throw err;
      }).catch(function (err) {
        if (!_this.opts.debug) {
          throw new Error(`${err.message}\n\nUse debug option for more info: ` + `new MongoMemoryServer({ debug: true })`);
        }
        throw err;
      });

      return _this.runningInstance.then(function () {
        return true;
      });
    })();
  }

  _startUpInstance() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const data = {};
      let tmpDir;

      const instOpts = _this2.opts.instance;
      data.port = yield (0, _getPort2.default)({ port: instOpts.port });
      _this2.debug = (0, _debug2.default)(`Mongo[${data.port}]`);
      _this2.debug.enabled = !!_this2.opts.debug;
      data.dbName = yield generateDbName(instOpts.dbName);
      data.uri = yield generateConnectionString(data.port, data.dbName);
      data.storageEngine = instOpts.storageEngine || 'ephemeralForTest';
      if (instOpts.dbPath) {
        data.dbPath = instOpts.dbPath;
      } else {
        tmpDir = _tmp2.default.dirSync({ prefix: 'mongo-mem-', unsafeCleanup: true });
        data.dbPath = tmpDir.name;
      }

      _this2.debug(`Starting MongoDB instance with following options: ${JSON.stringify(data)}`);

      // Download if not exists mongo binaries in ~/.mongodb-prebuilt
      // After that startup MongoDB instance
      const instance = yield _MongoInstance2.default.run({
        instance: {
          port: data.port,
          storageEngine: data.storageEngine,
          dbPath: data.dbPath,
          debug: _this2.opts.instance.debug
        },
        binary: _this2.opts.binary,
        spawn: _this2.opts.spawn,
        debug: _this2.debug
      });
      data.instance = instance;
      data.childProcess = instance.childProcess;
      data.tmpDir = tmpDir;

      return data;
    })();
  }

  stop() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var _ref3 = yield _this3.getInstanceData();

      const instance = _ref3.instance,
            port = _ref3.port,
            tmpDir = _ref3.tmpDir;


      _this3.debug(`Shutdown MongoDB server on port ${port} with pid ${instance.getPid() || ''}`);
      yield instance.kill();

      if (tmpDir) {
        _this3.debug(`Removing tmpDir ${tmpDir.name}`);
        tmpDir.removeCallback();
      }

      _this3.runningInstance = null;
      return true;
    })();
  }

  getInstanceData() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (_this4.runningInstance) {
        return _this4.runningInstance;
      }
      throw new Error('Database instance is not running. You should start database by calling start() method. BTW it should start automatically if opts.autoStart!=false. Also you may provide opts.debug=true for more info.');
    })();
  }

  getUri(otherDbName = false) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      var _ref4 = yield _this5.getInstanceData();

      const uri = _ref4.uri,
            port = _ref4.port;

      // IF true OR string

      if (otherDbName) {
        if (typeof otherDbName === 'string') {
          // generate uri with provided DB name on existed DB instance
          return generateConnectionString(port, otherDbName);
        }
        // generate new random db name
        return generateConnectionString(port, (yield generateDbName()));
      }

      return uri;
    })();
  }

  getConnectionString(otherDbName = false) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return _this6.getUri(otherDbName);
    })();
  }

  getPort() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      var _ref5 = yield _this7.getInstanceData();

      const port = _ref5.port;

      return port;
    })();
  }

  getDbPath() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      var _ref6 = yield _this8.getInstanceData();

      const dbPath = _ref6.dbPath;

      return dbPath;
    })();
  }

  getDbName() {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      var _ref7 = yield _this9.getInstanceData();

      const dbName = _ref7.dbName;

      return dbName;
    })();
  }
}
exports.default = MongoMemoryServer;