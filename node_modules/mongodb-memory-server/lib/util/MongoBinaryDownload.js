'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _md5File = require('md5-file');

var _md5File2 = _interopRequireDefault(_md5File);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _httpsProxyAgent = require('https-proxy-agent');

var _httpsProxyAgent2 = _interopRequireDefault(_httpsProxyAgent);

var _decompress = require('decompress');

var _decompress2 = _interopRequireDefault(_decompress);

var _MongoBinaryDownloadUrl = require('./MongoBinaryDownloadUrl');

var _MongoBinaryDownloadUrl2 = _interopRequireDefault(_MongoBinaryDownloadUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
/* eslint-disable class-methods-use-this */

class MongoBinaryDownload {

  constructor({ platform, arch, downloadDir, version, debug }) {
    this.platform = platform || _os2.default.platform();
    this.arch = arch || _os2.default.arch();
    this.version = version || 'latest';
    this.downloadDir = _path2.default.resolve(downloadDir || 'mongodb-download');
    this.dlProgress = {
      current: 0,
      length: 0,
      totalMb: 0,
      lastPrintedAt: 0
    };

    if (debug) {
      if (debug.call && typeof debug === 'function' && debug.apply) {
        this.debug = debug;
      } else {
        this.debug = console.log.bind(null);
      }
    } else {
      this.debug = () => {};
    }
  }

  getMongodPath() {
    var _this = this;

    return _asyncToGenerator(function* () {
      const binaryName = _this.platform === 'win32' ? 'mongod.exe' : 'mongod';
      const mongodPath = _path2.default.resolve(_this.downloadDir, _this.version, binaryName);
      if (_this.locationExists(mongodPath)) {
        return mongodPath;
      }

      const mongoDBArchive = yield _this.startDownload();
      yield _this.extract(mongoDBArchive);
      _fs2.default.unlinkSync(mongoDBArchive);

      if (_this.locationExists(mongodPath)) {
        return mongodPath;
      }

      throw new Error(`Cannot find downloaded mongod binary by path ${mongodPath}`);
    })();
  }

  startDownload() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const mbdUrl = new _MongoBinaryDownloadUrl2.default({
        platform: _this2.platform,
        arch: _this2.arch,
        version: _this2.version
      });

      if (!_fs2.default.existsSync(_this2.downloadDir)) {
        _fs2.default.mkdirSync(_this2.downloadDir);
      }

      const downloadUrl = yield mbdUrl.getDownloadUrl();
      const mongoDBArchive = yield _this2.download(downloadUrl);

      const mongoDBArchiveMd5 = yield _this2.download(`${downloadUrl}.md5`);
      yield _this2.checkMd5(mongoDBArchiveMd5, mongoDBArchive);

      return mongoDBArchive;
    })();
  }

  checkMd5(mongoDBArchiveMd5, mongoDBArchive) {
    return _asyncToGenerator(function* () {
      const signatureContent = _fs2.default.readFileSync(mongoDBArchiveMd5).toString('UTF-8');
      const m = signatureContent.match(/(.*?)\s/);
      const md5Remote = m ? m[1] : null;
      const md5Local = _md5File2.default.sync(mongoDBArchive);
      if (md5Remote !== md5Local) {
        throw new Error('MongoBinaryDownload: md5 check is failed');
      }
    })();
  }

  download(downloadUrl) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const proxy = process.env['yarn_https-proxy'] || process.env.yarn_proxy || process.env['npm_config_https-proxy'] || process.env.npm_config_proxy || process.env.https_proxy || process.env.http_proxy;

      const urlObject = _url2.default.parse(downloadUrl);

      const downloadOptions = {
        hostname: urlObject.hostname,
        port: urlObject.port || 443,
        path: urlObject.path,
        method: 'GET',
        agent: proxy ? new _httpsProxyAgent2.default(proxy) : undefined
      };

      const filename = (urlObject.pathname || '').split('/').pop();
      if (!filename) {
        throw new Error(`MongoBinaryDownload: missing filename for url ${downloadUrl}`);
      }

      const downloadLocation = _path2.default.resolve(_this3.downloadDir, filename);
      const tempDownloadLocation = _path2.default.resolve(_this3.downloadDir, `${filename}.downloading`);
      console.log(`Downloading${proxy ? ` via proxy ${proxy}` : ''}:`, downloadUrl);
      const downloadedFile = yield _this3.httpDownload(downloadOptions, downloadLocation, tempDownloadLocation);
      return downloadedFile;
    })();
  }

  extract(mongoDBArchive) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const binaryName = _this4.platform === 'win32' ? 'mongod.exe' : 'mongod';
      const extractDir = _path2.default.resolve(_this4.downloadDir, _this4.version);
      _this4.debug(`extract(): ${extractDir}`);

      if (!_fs2.default.existsSync(extractDir)) {
        _fs2.default.mkdirSync(extractDir);
      }

      let filter;
      if (_this4.platform === 'win32') {
        filter = function filter(file) {
          return (/bin\/mongod.exe$/.test(file.path) || /.dll$/.test(file.path)
          );
        };
      } else {
        filter = function filter(file) {
          return (/bin\/mongod$/.test(file.path)
          );
        };
      }

      yield (0, _decompress2.default)(mongoDBArchive, extractDir, {
        // extract only `bin/mongod` file
        filter,
        // extract to root folder
        map: function map(file) {
          file.path = _path2.default.basename(file.path); // eslint-disable-line
          return file;
        }
      });

      if (!_this4.locationExists(_path2.default.resolve(_this4.downloadDir, _this4.version, binaryName))) {
        throw new Error(`MongoBinaryDownload: missing mongod binary in ${mongoDBArchive}`);
      }
      return extractDir;
    })();
  }

  httpDownload(httpOptions, downloadLocation, tempDownloadLocation) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return new Promise(function (resolve, reject) {
        const fileStream = _fs2.default.createWriteStream(tempDownloadLocation);

        const req = _https2.default.get(httpOptions, function (response) {
          _this5.dlProgress.current = 0;
          _this5.dlProgress.length = parseInt(response.headers['content-length'], 10);
          _this5.dlProgress.totalMb = Math.round(_this5.dlProgress.length / 1048576 * 10) / 10;

          response.pipe(fileStream);

          fileStream.on('finish', function () {
            fileStream.close();
            _fs2.default.renameSync(tempDownloadLocation, downloadLocation);
            _this5.debug(`renamed ${tempDownloadLocation} to ${downloadLocation}`);
            resolve(downloadLocation);
          });

          response.on('data', function (chunk) {
            _this5.printDownloadProgress(chunk);
          });

          req.on('error', function (e) {
            _this5.debug('request error:', e);
            reject(e);
          });
        });
      });
    })();
  }

  printDownloadProgress(chunk) {
    this.dlProgress.current += chunk.length;

    const now = Date.now();
    if (now - this.dlProgress.lastPrintedAt < 2000) return;
    this.dlProgress.lastPrintedAt = now;

    const percentComplete = Math.round(100.0 * this.dlProgress.current / this.dlProgress.length * 10) / 10;
    const mbComplete = Math.round(this.dlProgress.current / 1048576 * 10) / 10;

    const crReturn = this.platform === 'win32' ? '\x1b[0G' : '\r';
    process.stdout.write(`Downloading MongoDB ${this.version}: ${percentComplete} % (${mbComplete}mb ` + `/ ${this.dlProgress.totalMb}mb)${crReturn}`);
  }

  locationExists(location) {
    try {
      _fs2.default.lstatSync(location);
      return true;
    } catch (e) {
      if (e.code !== 'ENOENT') throw e;
      return false;
    }
  }
}
exports.default = MongoBinaryDownload;